// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: internal/proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsClient interface {
	UpdateGauge(ctx context.Context, in *UpdGaugeRequest, opts ...grpc.CallOption) (*UpdGaugeResponse, error)
	UpdateCounter(ctx context.Context, in *UpdCounterRequest, opts ...grpc.CallOption) (*UpdCounterResponse, error)
	UpdateMetrics(ctx context.Context, in *UpdMetricsRequest, opts ...grpc.CallOption) (*UpdMetricsResponse, error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) UpdateGauge(ctx context.Context, in *UpdGaugeRequest, opts ...grpc.CallOption) (*UpdGaugeResponse, error) {
	out := new(UpdGaugeResponse)
	err := c.cc.Invoke(ctx, "/metrics.Metrics/UpdateGauge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) UpdateCounter(ctx context.Context, in *UpdCounterRequest, opts ...grpc.CallOption) (*UpdCounterResponse, error) {
	out := new(UpdCounterResponse)
	err := c.cc.Invoke(ctx, "/metrics.Metrics/UpdateCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) UpdateMetrics(ctx context.Context, in *UpdMetricsRequest, opts ...grpc.CallOption) (*UpdMetricsResponse, error) {
	out := new(UpdMetricsResponse)
	err := c.cc.Invoke(ctx, "/metrics.Metrics/UpdateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServer is the server API for Metrics service.
// All implementations must embed UnimplementedMetricsServer
// for forward compatibility
type MetricsServer interface {
	UpdateGauge(context.Context, *UpdGaugeRequest) (*UpdGaugeResponse, error)
	UpdateCounter(context.Context, *UpdCounterRequest) (*UpdCounterResponse, error)
	UpdateMetrics(context.Context, *UpdMetricsRequest) (*UpdMetricsResponse, error)
	mustEmbedUnimplementedMetricsServer()
}

// UnimplementedMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServer struct {
}

func (UnimplementedMetricsServer) UpdateGauge(context.Context, *UpdGaugeRequest) (*UpdGaugeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGauge not implemented")
}
func (UnimplementedMetricsServer) UpdateCounter(context.Context, *UpdCounterRequest) (*UpdCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCounter not implemented")
}
func (UnimplementedMetricsServer) UpdateMetrics(context.Context, *UpdMetricsRequest) (*UpdMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (UnimplementedMetricsServer) mustEmbedUnimplementedMetricsServer() {}

// UnsafeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServer will
// result in compilation errors.
type UnsafeMetricsServer interface {
	mustEmbedUnimplementedMetricsServer()
}

func RegisterMetricsServer(s grpc.ServiceRegistrar, srv MetricsServer) {
	s.RegisterService(&Metrics_ServiceDesc, srv)
}

func _Metrics_UpdateGauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdGaugeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).UpdateGauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Metrics/UpdateGauge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).UpdateGauge(ctx, req.(*UpdGaugeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_UpdateCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).UpdateCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Metrics/UpdateCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).UpdateCounter(ctx, req.(*UpdCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_UpdateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).UpdateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.Metrics/UpdateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).UpdateMetrics(ctx, req.(*UpdMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metrics_ServiceDesc is the grpc.ServiceDesc for Metrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateGauge",
			Handler:    _Metrics_UpdateGauge_Handler,
		},
		{
			MethodName: "UpdateCounter",
			Handler:    _Metrics_UpdateCounter_Handler,
		},
		{
			MethodName: "UpdateMetrics",
			Handler:    _Metrics_UpdateMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/metrics.proto",
}
